{"version":3,"sources":["store/todosStore.ts","components/AddTodo/AddTodo.tsx","store/modalWindowStore.ts","components/TodosItem/TodosItem.tsx","store/searchInputStore.ts","store/rootStore.ts","components/TodosList/TodosList.tsx","components/ModalWindow/ModalWindow.tsx","components/SearchField/SearchField.tsx","App.tsx","index.tsx"],"names":["changeTodoStatus","id","done","type","initialTodoState","todos","todosReducer","state","action","todo","filter","map","title","AddTodo","useState","inputValue","changeInputValue","dispatch","useDispatch","className","value","onChange","target","placeholder","onClick","length","trim","uuidv4","openModal","isOpen","initialState","modalReducer","TodosItem","isEditing","setIsEditing","newTodoTitle","setNewTodoTitle","todosDispatch","modalDispatch","key","cn","todos_item__label_hidden","todos_item__label_done","onDoubleClick","todos_item__editing_title","onKeyDown","event","changeTodoTitle","submitChangeTitle","todos_item__delete_button_active","initialSearchState","searchReducer","rootReducer","combineReducers","searchField","store","createStore","todosSelector","openModalSelector","idForDeleteSelector","todoTitleSelector","prepareTodosSelector","toLowerCase","includes","TodosList","useSelector","ModalWindow","isOpenModal","idForDelete","todoTitle","modalWindowDispatch","xmlns","width","height","viewBox","data-testid","d","fill","SearchField","searchDispatch","debounceSearchParams","useCallback","debounce","searchValue","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61dfbbf1.chunk.js","sourcesContent":["import { Action } from 'redux';\r\n\r\nconst ADD_TODO = \"ADD_TODO\";\r\nconst DELETE_TODO = \"DELETE_TODO\";\r\nconst CHANGE_TODO_TITLE = \"CHANGE_TODO_Title\";\r\nconst CHANGE_TODO_STATUS = \"CHANGE_TODO_STATUS\";\r\n\r\ntype AddTodo = Action<typeof ADD_TODO> & {\r\n    todo: Todo;\r\n};\r\n\r\ntype DeleteTodo = Action<typeof DELETE_TODO> & {\r\n    id: string | null;\r\n}\r\n\r\ntype ChangeTodoTitle = Action<typeof CHANGE_TODO_TITLE> & {\r\n    id: string;\r\n    title: string;\r\n}\r\n\r\ntype ChangeTodoStatus = Action<typeof CHANGE_TODO_STATUS> & {\r\n    id: string;\r\n    done: boolean;\r\n}\r\n\r\nexport const addTodo = (todo: Todo):AddTodo => ({\r\n    type: ADD_TODO,\r\n    todo,\r\n});\r\n\r\nexport const deleteTodo = (id: string | null): DeleteTodo => ({\r\n    type: DELETE_TODO,\r\n    id,\r\n});\r\n\r\nexport const changeTodoTitle = (id: string, title: string): ChangeTodoTitle => ({\r\n    type: CHANGE_TODO_TITLE,\r\n    id,\r\n    title,\r\n});\r\n\r\nexport const changeTodoStatus = (id: string, done: boolean): ChangeTodoStatus => ({\r\n    type: CHANGE_TODO_STATUS,\r\n    id,\r\n    done,\r\n});\r\n\r\nexport type InitialTodoState = {\r\n    todos: Todo[];\r\n}\r\n\r\nconst initialTodoState: InitialTodoState = {\r\n    todos: [],\r\n};\r\n\r\nexport type AllTodoActions = AddTodo | DeleteTodo | ChangeTodoTitle | ChangeTodoStatus;\r\n\r\nconst todosReducer = ( state = initialTodoState, action: AllTodoActions) => {\r\n    switch (action.type) {\r\n\r\n        case ADD_TODO: return {\r\n            todos: [...state.todos, action.todo]\r\n        };\r\n\r\n        case DELETE_TODO: return {\r\n            todos: state.todos.filter(todo => todo.id !== action.id)\r\n        };\r\n\r\n        case CHANGE_TODO_TITLE: return {\r\n            todos: state.todos.map(todo => (\r\n                (todo.id === action.id)\r\n                    ? {...todo, title: action.title}\r\n                    : todo\r\n            ))\r\n        };\r\n\r\n        case CHANGE_TODO_STATUS: return {\r\n            todos: state.todos.map(todo => (\r\n                (todo.id === action.id)\r\n                    ? {...todo, done: action.done}\r\n                    : todo\r\n            ))\r\n        };\r\n\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default todosReducer;\r\n","import React, { useState, Dispatch } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport \"./AddTodo.scss\";\r\nimport {addTodo, AllTodoActions} from \"../../store/todosStore\";\r\n\r\nconst AddTodo = () => {\r\n    const [inputValue, changeInputValue] = useState<string>(\"\");\r\n    const dispatch = useDispatch<Dispatch<AllTodoActions>>();\r\n\r\n    return (\r\n        <div className=\"add-todo\">\r\n            <input\r\n                type=\"text\"\r\n                className=\"add-todo__input\"\r\n                value={inputValue}\r\n                onChange={({ target }) => changeInputValue(target.value)}\r\n                placeholder=\"Enter task and press 'ADD' button\"\r\n            />\r\n            <button\r\n                type=\"button\"\r\n                className=\"add-todo__button\"\r\n                onClick={() => {\r\n                    if (inputValue.length > 0) {\r\n                        dispatch(addTodo({\r\n                            title: inputValue.trim(),\r\n                            id: uuidv4(),\r\n                            done: false,\r\n                        }));\r\n                    }\r\n                    changeInputValue(\"\")\r\n                }}\r\n            >\r\n                ADD\r\n            </button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default AddTodo;\r\n","import { Action } from 'redux';\r\n\r\nconst IS_OPEN_MODAL = \"IS_OPEN_MODAL\";\r\n\r\ntype OpenModal = Action<typeof IS_OPEN_MODAL> & {\r\n    isOpen: boolean;\r\n    id: string | null;\r\n    title: string | null;\r\n}\r\n\r\nexport const openModal = (isOpen: boolean, id: string | null, title: string | null): OpenModal => ({\r\n   type: IS_OPEN_MODAL,\r\n   isOpen,\r\n    id,\r\n    title,\r\n});\r\n\r\nexport type InitialModalState = {\r\n    isOpen: boolean;\r\n    id: string | null;\r\n    title: string | null;\r\n}\r\n\r\nconst initialState = {\r\n    isOpen: false,\r\n    id: null,\r\n    title: null,\r\n};\r\n\r\nexport type AllModalAction = OpenModal;\r\n\r\nconst modalReducer = (state= initialState, action: AllModalAction) => {\r\n    switch (action.type) {\r\n        case IS_OPEN_MODAL: return {\r\n            isOpen: action.isOpen,\r\n            id: action.id,\r\n            title: action.title,\r\n        };\r\n\r\n        default: return state\r\n    }\r\n};\r\n\r\nexport default modalReducer;\r\n","import React, {Dispatch, useState} from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport cn from 'classnames';\r\nimport \"./TodosItem.scss\";\r\nimport {AllTodoActions, changeTodoStatus, changeTodoTitle} from \"../../store/todosStore\";\r\nimport {AllModalAction, openModal} from \"../../store/modalWindowStore\";\r\n\r\ntype Props = {\r\n    todo: Todo;\r\n};\r\n\r\nconst TodosItem: React.FC<Props> = ({ todo }) => {\r\n    const {id, title, done} = todo;\r\n    const [isEditing, setIsEditing] = useState<boolean>(false);\r\n    const [newTodoTitle, setNewTodoTitle] = useState<string>(title);\r\n    const todosDispatch = useDispatch<Dispatch<AllTodoActions>>();\r\n    const modalDispatch = useDispatch<Dispatch<AllModalAction>>();\r\n\r\n    const submitChangeTitle = (event: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (event.key === 'Escape') {\r\n            setIsEditing(false);\r\n            setNewTodoTitle(title);\r\n        } else if (event.key === 'Enter' && newTodoTitle.length > 0) {\r\n            todosDispatch(changeTodoTitle(id, newTodoTitle));\r\n            setIsEditing(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <li\r\n            key={todo.id}\r\n            className=\"todos_item\"\r\n        >\r\n            <input\r\n                type=\"checkbox\"\r\n                className=\"todos_item__checkbox\"\r\n            />\r\n            <label\r\n                className={cn(\r\n                    \"todos_item__label\",\r\n                    {\r\n                        todos_item__label_hidden: !isEditing,\r\n                        todos_item__label_done: done,\r\n                    }\r\n                    )}\r\n                onDoubleClick={() => {\r\n                    setIsEditing(true)\r\n                    todosDispatch(changeTodoStatus(id, false))\r\n                }}\r\n                onClick={() => todosDispatch(changeTodoStatus(id, !done))}\r\n            >\r\n                {todo.title}\r\n            </label>\r\n            <input\r\n                type=\"text\"\r\n                className={cn(\r\n                    \"todos_item__edit_input\",\r\n                    {\r\n                        todos_item__editing_title: isEditing,\r\n                    }\r\n                    )}\r\n                value={newTodoTitle}\r\n                onChange={({target}) => setNewTodoTitle(target.value)}\r\n                onKeyDown={(event) => submitChangeTitle(event)}\r\n            />\r\n            <button\r\n                type=\"button\"\r\n                className={cn(\r\n                    \"todos_item__delete_button\",\r\n                    {\r\n                        todos_item__delete_button_active: done,\r\n                    }\r\n                )}\r\n                onClick={() => modalDispatch(openModal(true, id, title))}\r\n            >\r\n                Delete\r\n            </button>\r\n        </li>\r\n    )\r\n};\r\n\r\nexport default TodosItem;\r\n","import { Action } from \"redux\";\r\n\r\nconst SEARCH_VALUE = \"SEARCH_VALUE\";\r\n\r\ntype SearchValue = Action<typeof SEARCH_VALUE> & {\r\n    value: string,\r\n}\r\n\r\nexport const searchValue = (value: string): SearchValue => ({\r\n    type: SEARCH_VALUE,\r\n    value,\r\n}) ;\r\n\r\nexport type InitialSearchState = {\r\n    value: string;\r\n};\r\n\r\nconst initialSearchState: InitialSearchState = {\r\n    value: \"\",\r\n};\r\n\r\nexport type AllSearchActions = SearchValue;\r\n\r\nconst searchReducer = (state = initialSearchState, action: AllSearchActions) => {\r\n    switch (action.type) {\r\n        case SEARCH_VALUE: return {\r\n            value: action.value,\r\n        };\r\n\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default searchReducer;\r\n","import { combineReducers, createStore } from 'redux';\r\nimport todosReducer, { InitialTodoState } from \"./todosStore\";\r\nimport modalReducer, {InitialModalState} from \"./modalWindowStore\";\r\nimport searchReducer, {InitialSearchState} from \"./searchInputStore\";\r\n\r\nconst rootReducer = combineReducers({\r\n    todos: todosReducer,\r\n    openModal: modalReducer,\r\n    searchField: searchReducer,\r\n});\r\n\r\nconst store = createStore(rootReducer);\r\n\r\ntype State = {\r\n    todos: InitialTodoState;\r\n    openModal: InitialModalState;\r\n    searchField: InitialSearchState;\r\n}\r\n\r\n//todos selector\r\nexport const todosSelector = (state: State) => (state.todos.todos);\r\n\r\n//modal selectors\r\nexport const openModalSelector = (state: State) => (state.openModal.isOpen);\r\nexport const idForDeleteSelector = (state: State) => (state.openModal.id);\r\nexport const todoTitleSelector = (state: State) => (state.openModal.title);\r\n\r\n//preparedTodosSelector selector\r\nexport const prepareTodosSelector = (state: State) => (\r\n    state.todos.todos.filter(todo => (\r\n        todo.title.toLowerCase().includes(state.searchField.value.toLowerCase())\r\n    ))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport TodosItem from \"../TodosItem/TodosItem\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { prepareTodosSelector } from \"../../store/rootStore\";\r\nimport \"./TodosList.scss\";\r\n\r\nconst TodosList = () => {\r\n    const todos = useSelector(prepareTodosSelector);\r\n\r\n    return (\r\n        <ul className=\"todos-list\">\r\n            {todos.map(todo => (\r\n                <TodosItem todo={todo}/>\r\n            ))}\r\n        </ul>\r\n    )\r\n};\r\n\r\nexport default TodosList;\r\n","import React, {Dispatch} from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport \"./ModalWindow.scss\";\r\nimport {idForDeleteSelector, openModalSelector, todoTitleSelector} from \"../../store/rootStore\";\r\nimport {AllTodoActions, deleteTodo} from \"../../store/todosStore\";\r\nimport {AllModalAction, openModal} from \"../../store/modalWindowStore\";\r\n\r\nconst ModalWindow = () => {\r\n    const isOpenModal = useSelector(openModalSelector);\r\n    const idForDelete = useSelector(idForDeleteSelector);\r\n    const todoTitle = useSelector(todoTitleSelector);\r\n    const todosDispatch = useDispatch<Dispatch<AllTodoActions>>();\r\n    const modalWindowDispatch = useDispatch<Dispatch<AllModalAction>>();\r\n\r\n    return (\r\n        <>\r\n            {isOpenModal\r\n            && (\r\n                <div className=\"modal__overlay\">\r\n                    <div className=\"modal__body\">\r\n                        <div className=\"modal__text\">\r\n                            {`Do you really want to delete «${todoTitle}» ?`}\r\n                        </div>\r\n                        <div className=\"modal__buttons-wrapper\">\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"modal__button\"\r\n                                onClick={() => {\r\n                                    todosDispatch(deleteTodo(idForDelete));\r\n                                    modalWindowDispatch(openModal(false, null, null))\r\n                                }}\r\n                            >\r\n                                OK\r\n                            </button>\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"modal__button\"\r\n                                onClick={() => {\r\n                                    modalWindowDispatch(openModal(false, null, null));\r\n                                }}\r\n                            >\r\n                                Cancel\r\n                            </button>\r\n                        </div>\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"modal__button-cross\"\r\n                            onClick={() => modalWindowDispatch(openModal(false, null, null))}\r\n                        >\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 36 36\" data-testid=\"close-icon\">\r\n                                <path\r\n                                    d=\"M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z\"\r\n                                    fill=\"#000\"\r\n                                >\r\n                                </path>\r\n                            </svg>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ModalWindow;\r\n","import React, {useState, Dispatch, useCallback} from \"react\";\r\nimport debounce from 'lodash.debounce';\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"./SearchField.scss\";\r\nimport {AllSearchActions, searchValue} from \"../../store/searchInputStore\";\r\n\r\n\r\nconst SearchField = () => {\r\n    const [inputValue, changeInputValue] = useState<string>('');\r\n    const searchDispatch = useDispatch<Dispatch<AllSearchActions>>();\r\n\r\n    const debounceDispatch = (value: string) => {\r\n        searchDispatch(searchValue(value))\r\n    };\r\n\r\n    const debounceSearchParams = useCallback(\r\n        debounce((debounceDispatch), 500), []\r\n    );\r\n\r\n    return (\r\n        <div className=\"searchField\">\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                className=\"searchField__input\"\r\n                onChange={({ target }) => {\r\n                    changeInputValue(target.value);\r\n                    debounceSearchParams(target.value);\r\n                }}\r\n                placeholder=\"Enter task name for search...\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchField;\r\n","import React from 'react';\nimport { useSelector } from \"react-redux\";\nimport './App.scss';\nimport AddTodo from \"./components/AddTodo/AddTodo\";\nimport TodosList from \"./components/TodosList/TodosList\";\nimport ModalWindow from \"./components/ModalWindow/ModalWindow\";\nimport SearchField from \"./components/SearchField/SearchField\";\nimport { todosSelector } from \"./store/rootStore\";\n\nconst App = () => {\n    const todos = useSelector(todosSelector);\n\n  return (\n    <div className=\"app\">\n        <div className=\"app__content\">\n            {todos.length > 2\n            && <SearchField />}\n            <AddTodo />\n            <TodosList />\n        </div>\n        <ModalWindow />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport App from './App';\nimport store from \"./store/rootStore\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}